package org.curtis.content;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Tables {
    private static final List<String> TABLE_NAMES = Arrays.asList(
            "accidental",
            "accord",
            "articulation",
            "barline_ending",
            "barline_repeat",
            "barre",
            "bass",
            "bass_alter",
            "bass_step",
            "beam",
            "bend_sound",
            "bend_with_bar",
            "bezier",
            "clef",
            "credit",
            "credit_display",
            "credit_type",
            "dashed_formatting",
            "defaults",
            "degree",
            "degree_alter",
            "degree_type",
            "degree_value",
            "direction_offset",
            "direction_type",
            "direction_type_list",
            "directive",
            "display",
            "distance",
            "dot",
            "dynamics_marking",
            "editorial",
            "editorial_level",
            "elision",
            "encoding",
            "except_voice",
            "feature",
            "figure",
            "figure_part",
            "first_fret",
            "font",
            "footnote",
            "frame",
            "frame_note",
            "glyph",
            "grace",
            "group_barline",
            "group_name",
            "group_symbol",
            "harmony_chord",
            "identification",
            "identification_type",
            "instrument_type",
            "interchangeable",
            "inversion",
            "key_octave",
            "key_signature",
            "kind",
            "layout",
            "level_display",
            "line",
            "line_width",
            "link_attributes",
            "lyric",
            "lyric_font",
            "lyric_item",
            "lyric_language",
            "lyric_syllable",
            "lyric_text_data",
            "measure",
            "measure_style",
            "metronome_beam",
            "metronome_mark",
            "metronome_note",
            "metronome_tuplet",
            "midi_device",
            "midi_instrument",
            "miscellaneous",
            "music_data",
            "name_display",
            "non_traditional_key_type",
            "notation",
            "notations",
            "note_size",
            "note_type",
            "notehead",
            "ornament",
            "other_appearance",
            "page_layout",
            "page_margins",
            "part",
            "part_list_item",
            "part_name",
            "part_symbol",
            "pedal_tuning",
            "play",
            "play_type",
            "position",
            "printout",
            "root_alter",
            "root_step",
            "score",
            "score_declaration",
            "score_doctype",
            "score_header",
            "score_instrument",
            "score_midi",
            "score_part_group",
            "score_view",
            "score_xml_declaration",
            "slash_group",
            "sound_midi",
            "staff_details",
            "staff_layout",
            "staff_tuning",
            "stem",
            "system_divider",
            "system_layout",
            "technical",
            "text_display",
            "text_format",
            "tie",
            "time",
            "time_modification",
            "time_signature_type",
            "transpose",
            "trill_sound",
            "tuning",
            "tuplet_dot",
            "tuplet_number",
            "tuplet_portion",
            "tuplet_type",
            "virtual_instrument",
            "work",
            "xml_comment"
            );

    private static final List<String> MUSIC_DATA_TYPES = Arrays.asList(
            "note",
            "backup",
            "forward",
            "direction",
            "attributes",
            "harmony",
            "figured-bass",
            "print",
            "sound",
            "barline",
            "grouping",
            "link",
            "bookmark"
    );

    public static MenuItem getTableReference() {
        return new MenuItem("Table Reference", "database/reference/tableReference.jsp",
                Tables.TABLE_NAMES.stream().map(Tables::getTableReferenceMenuItem).collect(Collectors.toList()));
    }

    private static MenuItem getTableReferenceMenuItem(String tableName) {
        MenuItem menuItem = new MenuItem(new TableReference(tableName));
        if (tableName.equals("music_data")) menuItem.setSublist(MUSIC_DATA_TYPES.stream().map(Tables::getTableReferenceMenuItem).collect(Collectors.toList()));

        return menuItem;
    }
}
